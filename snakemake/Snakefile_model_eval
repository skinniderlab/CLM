configfile: "config.json"
threads: 1
# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
DATASET = os.path.splitext(os.path.basename(config["dataset"]))[0]
REPRESENTATIONS = config["representations"]
REPRESENTATIONS_NO_SELFIES = [r for r in REPRESENTATIONS if r!="SELFIES"]
SEEDS = config["seeds"]
FOLDS = config["folds"]
ENUM_FACTORS = config["enum_factors"]
METRICS = config["metrics"]
OUTPUT_DIR = config['output_dir']
MODEL_PARAMS = config['model_params']
ERR_PPM = config['err_ppm']

shell.executable("/bin/bash")

wildcard_constraints:
    dataset=DATASET,
    repr='|'.join(REPRESENTATIONS),
    fold='\d+',
    seed='\d+'

# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Rules
# -----------------------------------------------------------------------------
rule all:
    input:
        calculate_outcomes_file=expand(f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_calculate_outcomes.csv",
        fold=range(FOLDS), repr=REPRESENTATIONS, dataset=DATASET, enum_factor=ENUM_FACTORS),
        nn_tc_file=expand(f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_{{metric}}_write_nn_tc.csv",
        repr=REPRESENTATIONS, fold=range(FOLDS), dataset=DATASET, enum_factor=ENUM_FACTORS, metric=METRICS),
        train_discriminator=expand(f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_{{metric}}_train_discriminator_.csv",
        repr=REPRESENTATIONS, fold=range(FOLDS), dataset=DATASET, enum_factor=ENUM_FACTORS, metric=METRICS),
        freq_distribution=expand(f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_{{metric}}_freq_distribution.csv",
        repr=REPRESENTATIONS, fold=range(FOLDS), dataset=DATASET, enum_factor=ENUM_FACTORS, metric=METRICS),

rule prep_outcome_freq:
    input:
        sample_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_unique_masses.csv",
    output:
        f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_prep_outcome_freq.csv",
    resources:
        mem_mb=120000,
        runtime=1000,
    shell:
        'clm inner_prep_outcomes_freq '
        '--sample_file {input.sample_file} '
        '--output_file {output} '
        '--max_molecules 50000 '


rule calculate_outcomes:
    input:
        train_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/inputs/train_{{dataset}}_{{repr}}_{{fold}}.smi",
        sampled_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_prep_outcome_freq.csv",
    output:
        output_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_calculate_outcomes.csv",
    resources:
        mem_mb=256000,
        runtime=1000,
    shell:
        'clm calculate_outcomes '
        '--train_file {input.train_file} '
        '--sampled_file {input.sampled_file} '
        '--max_orig_mols 50000 '
        '--output_file {output.output_file} '
	    '--seed 12 '


rule prep_nn_tc:
    input:
        sampled_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_unique_masses.csv",
        pubchem_file=config['pubchem_tsv_file'],
    output:
        output_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_{{metric}}_prep_nn_tc.csv",
    resources:
        mem_mb=64000,
        runtime=1000,
    shell:
        'clm inner_prep_nn_tc_PubChem '
        '--sample_file {input.sampled_file} '
        '--pubchem_file {input.pubchem_file} '
        '--sample_no 50000 '
        '--output_file {output.output_file} '


rule write_nn_tc:
    input:
        query_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_{{metric}}_prep_nn_tc.csv",
        reference_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/inputs/train_{{dataset}}_{{repr}}_{{fold}}.smi",
    output:
        output_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_{{metric}}_write_nn_tc.csv",
    resources:
        mem_mb=64000,
        runtime=1000,
    shell:
        'clm write_nn_Tc '
        '--query_file {input.query_file} '
        '--reference_file {input.reference_file} '
        '--output_file {output.output_file} '


rule train_discriminator:
    input:
        train_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/inputs/train_{{dataset}}_{{repr}}_{{fold}}.smi",
        sampled_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_unique_masses.csv",
    output:
        output_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_{{metric}}_train_discriminator_.csv",
    resources:
        mem_mb=64000,
        runtime=1000,
    shell:
        'clm write_nn_Tc '
        '--train_file {input.train_file} '
        '--sampled_file {input.sampled_file} '
        '--output_file {output.output_file} '


rule freq_distribution:
    input:
        sampled_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_unique_masses.csv",
        test_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/inputs/test0_{{dataset}}_{{repr}}_{{fold}}.smi",
    output:
        output_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_{{metric}}_freq_distribution.csv",
    resources:
        mem_mb=64000,
        runtime=1000,
    shell:
        'clm write_nn_Tc '
        '--sampled_file {input.sampled_file} '
        '--test_file {input.test_file} '
        '--output_file {output.output_file} '
