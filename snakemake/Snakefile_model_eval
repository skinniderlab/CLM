configfile: "config.json"
threads: 1
# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
DATASET = os.path.splitext(os.path.basename(config["dataset"]))[0]
REPRESENTATIONS = config["representations"]
FOLDS = config["folds"]
ENUM_FACTORS = config["enum_factors"]
OUTPUT_DIR = config['output_dir']

shell.executable("/bin/bash")

wildcard_constraints:
    dataset=DATASET,
    repr='|'.join(REPRESENTATIONS),
    fold='\d+'

# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Rules
# -----------------------------------------------------------------------------
rule all:
    input:
        calculate_outcomes_file=expand(f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_calculate_outcomes.csv",
            fold=range(FOLDS),repr=REPRESENTATIONS,dataset=DATASET,enum_factor=ENUM_FACTORS),
        # nn_tc_file=expand(f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_write_nn_tc.csv",
          #  repr=REPRESENTATIONS,fold=range(FOLDS),dataset=DATASET,enum_factor=ENUM_FACTORS),
        train_discriminator=expand(f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_train_discriminator_.csv",
            repr=REPRESENTATIONS,fold=range(FOLDS),dataset=DATASET,enum_factor=ENUM_FACTORS),
        freq_distribution=expand(f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_freq_distribution.csv",
            repr=REPRESENTATIONS, fold=range(FOLDS), dataset=DATASET, enum_factor=ENUM_FACTORS),
	calculate_outcome_distr=expand(f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_calculate_outcome_distrs.csv", repr=REPRESENTATIONS, fold=range(FOLDS), dataset=DATASET, enum_factor=ENUM_FACTORS),

rule prep_outcome_freq:
    """
    For sampled smiles in each fold, add a `bin` column denoting what
    frequency bin the sampled smile falls into.

    `max_molecules` is the max number of sampled smiles to consider for each
    frequency bin.
    """
    input:
        sample_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_unique_masses.csv",
    output:
        f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_prep_outcome_freq.csv",
    resources:
        mem_mb=120000,
        runtime=1000,
    shell:
        'clm inner_prep_outcomes_freq '
        '--sample_file {input.sample_file} '
        '--output_file {output} '
        '--max_molecules 500000 '


rule calculate_outcomes:
    """
    For sampled smiles in each fold and for each bin within that fold,
    calculate certain distribution metrics based on a comparison between
    distribution of sampled smiles and distribution of training smiles in the
    fold.

    `max_orig_mols` is the max number of sampled smiles to consider for each
    frequency bin.
    """
    input:
        train_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/inputs/train0_{{dataset}}_{{repr}}_{{fold}}.smi",
        sampled_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_prep_outcome_freq.csv",
    output:
        output_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_calculate_outcomes.csv",
    resources:
        mem_mb=256000,
        runtime=1000,
    shell:
        'clm calculate_outcomes '
        '--train_file {input.train_file} '
        '--sampled_file {input.sampled_file} '
        '--max_orig_mols 50000 '
        '--output_file {output.output_file} '
        '--seed 12 '


rule prep_nn_tc:
    input:
        sampled_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_unique_masses.csv",
        pubchem_file=config['pubchem_tsv_file'],
    output:
        output_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_prep_nn_tc.csv",
    resources:
        mem_mb=64000,
        runtime=1000,
    shell:
        'clm inner_prep_nn_tc_PubChem '
        '--sample_file {input.sampled_file} '
        '--pubchem_file {input.pubchem_file} '
        '--sample_no 50000 '
        '--output_file {output.output_file} '


rule write_nn_tc:
    input:
        query_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_prep_nn_tc.csv",
        reference_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/inputs/train0_{{dataset}}_{{repr}}_{{fold}}.smi",
    output:
        output_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_write_nn_tc.csv",
    resources:
        mem_mb=64000,
        runtime=1000,
    shell:
        'clm write_nn_Tc '
        '--query_file {input.query_file} '
        '--reference_file {input.reference_file} '
        '--output_file {output.output_file} '


rule train_discriminator:
    input:
        train_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/inputs/train0_{{dataset}}_{{repr}}_{{fold}}.smi",
        sampled_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_unique_masses.csv",
    output:
        output_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_train_discriminator_.csv",
    resources:
        mem_mb=64000,
        runtime=1000,
    shell:
        'clm train_discriminator '
        '--train_file {input.train_file} '
        '--sampled_file {input.sampled_file} '
        '--output_file {output.output_file} '


rule freq_distribution:
    input:
        sampled_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_unique_masses.csv",
        test_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/inputs/test0_{{dataset}}_{{repr}}_{{fold}}.smi",
    output:
        output_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_freq_distribution.csv",
    resources:
        mem_mb=64000,
        runtime=1000,
    shell:
        'clm write_freq_distribution '
        '--sampled_file {input.sampled_file} '
        '--test_file {input.test_file} '
        '--output_file {output.output_file} '


rule write_outcome_distr:
    input:
        sample_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_unique_masses.csv",
        train_file=f"{OUTPUT_DIR}/{{enum_factor}}/prior/inputs/train0_{{dataset}}_{{repr}}_{{fold}}.smi",
        pubchem_file=config['pubchem_tsv_file'],
    output:
        output_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_write_outcome_distr.csv",
    resources:
        mem_mb=64000,
        runtime=1000,
    shell:
        'clm write_outcome_distr '
        '--sample_file {input.sample_file} '
        '--train_file {input.train_file} '
        '--pubchem_file {input.pubchem_file} '
        '--max_mols 100000 '
        '--output_file {output.output_file} '


rule calculate_outcome_distrs:
    input:
        input_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_write_outcome_distr.csv",
    output:
        output_file=f"{OUTPUT_DIR}/model_evaluation/{{enum_factor}}/{{dataset}}_{{repr}}_{{fold}}_calculate_outcome_distrs.csv",
    resources:
        mem_mb=64000,
        runtime=1000,
    shell:
        'clm calculate_outcome_distrs '
        '--input_file {input.input_file} '
        '--output_file {output.output_file} '
